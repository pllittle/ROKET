// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_ROKET_RCPPEXPORTS_H_GEN_
#define RCPP_ROKET_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace ROKET {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("ROKET", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("ROKET", "_ROKET_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in ROKET");
            }
        }
    }

    inline arma::mat Rcpp_run_OT(const arma::vec& XX, const arma::vec& YY, const arma::mat& COST_XY, const double& EPS, const double& LAMBDA1, const double& LAMBDA2, const bool& balance, const bool& highLAM_lowMU, const double& conv, const arma::uword& max_iter, const bool& show, const arma::uword& show_iter) {
        typedef SEXP(*Ptr_Rcpp_run_OT)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_Rcpp_run_OT p_Rcpp_run_OT = NULL;
        if (p_Rcpp_run_OT == NULL) {
            validateSignature("arma::mat(*Rcpp_run_OT)(const arma::vec&,const arma::vec&,const arma::mat&,const double&,const double&,const double&,const bool&,const bool&,const double&,const arma::uword&,const bool&,const arma::uword&)");
            p_Rcpp_run_OT = (Ptr_Rcpp_run_OT)R_GetCCallable("ROKET", "_ROKET_Rcpp_run_OT");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Rcpp_run_OT(Shield<SEXP>(Rcpp::wrap(XX)), Shield<SEXP>(Rcpp::wrap(YY)), Shield<SEXP>(Rcpp::wrap(COST_XY)), Shield<SEXP>(Rcpp::wrap(EPS)), Shield<SEXP>(Rcpp::wrap(LAMBDA1)), Shield<SEXP>(Rcpp::wrap(LAMBDA2)), Shield<SEXP>(Rcpp::wrap(balance)), Shield<SEXP>(Rcpp::wrap(highLAM_lowMU)), Shield<SEXP>(Rcpp::wrap(conv)), Shield<SEXP>(Rcpp::wrap(max_iter)), Shield<SEXP>(Rcpp::wrap(show)), Shield<SEXP>(Rcpp::wrap(show_iter)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline Rcpp::List Rcpp_run_full_OT(const arma::mat& COST, const arma::mat& ZZ, const double& EPS, const double& LAMBDA1, const double& LAMBDA2, const bool& balance = false, const bool& highLAM_lowMU = true, const double& conv = 1e-5, const arma::uword& max_iter = 3e3, const int& ncores = 1, const bool& show = true, const arma::uword& show_iter = 50) {
        typedef SEXP(*Ptr_Rcpp_run_full_OT)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_Rcpp_run_full_OT p_Rcpp_run_full_OT = NULL;
        if (p_Rcpp_run_full_OT == NULL) {
            validateSignature("Rcpp::List(*Rcpp_run_full_OT)(const arma::mat&,const arma::mat&,const double&,const double&,const double&,const bool&,const bool&,const double&,const arma::uword&,const int&,const bool&,const arma::uword&)");
            p_Rcpp_run_full_OT = (Ptr_Rcpp_run_full_OT)R_GetCCallable("ROKET", "_ROKET_Rcpp_run_full_OT");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Rcpp_run_full_OT(Shield<SEXP>(Rcpp::wrap(COST)), Shield<SEXP>(Rcpp::wrap(ZZ)), Shield<SEXP>(Rcpp::wrap(EPS)), Shield<SEXP>(Rcpp::wrap(LAMBDA1)), Shield<SEXP>(Rcpp::wrap(LAMBDA2)), Shield<SEXP>(Rcpp::wrap(balance)), Shield<SEXP>(Rcpp::wrap(highLAM_lowMU)), Shield<SEXP>(Rcpp::wrap(conv)), Shield<SEXP>(Rcpp::wrap(max_iter)), Shield<SEXP>(Rcpp::wrap(ncores)), Shield<SEXP>(Rcpp::wrap(show)), Shield<SEXP>(Rcpp::wrap(show_iter)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List Rcpp_KernTest(const arma::vec& RESI, const Rcpp::List& KK, const arma::uword& nPERMS = 2e3, const arma::uword& iter1 = 50, const arma::uword& iter2 = 1e3, const bool& verbose = false) {
        typedef SEXP(*Ptr_Rcpp_KernTest)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_Rcpp_KernTest p_Rcpp_KernTest = NULL;
        if (p_Rcpp_KernTest == NULL) {
            validateSignature("Rcpp::List(*Rcpp_KernTest)(const arma::vec&,const Rcpp::List&,const arma::uword&,const arma::uword&,const arma::uword&,const bool&)");
            p_Rcpp_KernTest = (Ptr_Rcpp_KernTest)R_GetCCallable("ROKET", "_ROKET_Rcpp_KernTest");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Rcpp_KernTest(Shield<SEXP>(Rcpp::wrap(RESI)), Shield<SEXP>(Rcpp::wrap(KK)), Shield<SEXP>(Rcpp::wrap(nPERMS)), Shield<SEXP>(Rcpp::wrap(iter1)), Shield<SEXP>(Rcpp::wrap(iter2)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

}

#endif // RCPP_ROKET_RCPPEXPORTS_H_GEN_
